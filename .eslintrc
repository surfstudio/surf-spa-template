{
    "root": true,
    "env": {
        "browser": true,
        "es2021": true,
        "jest": true,
        "node": true,
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:react-hooks/recommended",
        "plugin:prettier/recommended",
        "plugin:react/recommended",
        "plugin:react/jsx-runtime",
        "plugin:import/recommended",
        "plugin:import/typescript",
    ],
    "ignorePatterns": ["dist", ".eslintrc.cjs"],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "sourceType": "module",
        "ecmaVersion": "latest",
    },
    "plugins": ["import", "simple-import-sort", "react", "@typescript-eslint", "react-hooks", "jsx-a11y", "prettier"],
    "rules": {
        "prettier/prettier": [
            "error",
            {
                "endOfLine": "auto",
                "singleQuote": true,
                "tabWidth": 4,
                "bracketSpacing": true,
                "bracketSameLine": true,
                "printWidth": 120,
                "semi": true,
                "trailingComma": "all",
                "arrowParens": "always",
            },
        ],
        "import/no-unresolved": "off",
        "simple-import-sort/exports": "error",
        "simple-import-sort/imports": [
            "error",
            {
                "groups": [
                    // Packages. react related packages come first.
                    ["^react", "^@?\\w"],
                    // Internal packages.
                    ["App|index"],

                    ["^(core)(/.*|$)"],
                    ["^(styles)(/.*|$)"],
                    ["^(public)(/.*|$)"],
                    ["^(vendor)(/.*|$)"],
                    ["^(modules)(/.*|$)"],

                    ["^(components)(/.*|$)"],

                    // Side effect imports.
                    ["^\\u0000"],
                    // Parent imports. Like ..
                    ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
                    // Other relative imports. Put same-folder imports and .
                    ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
                    ["^(\\./styled/?)((/.*|$))", "^(\\./types/?)((/.*|$))"],
                    // Style imports.
                    ["^.+\\.?(css)$"],
                ],
            },
        ],
        "padding-line-between-statements": [
            "warn",
            { "blankLine": "always", "prev": "*", "next": "return" },
            { "blankLine": "always", "prev": "block-like", "next": "*" },
            { "blankLine": "always", "prev": "*", "next": "block-like" },
        ],
        "react/function-component-definition": 0,
        "react/react-in-jsx-scope": 0,
        "react/jsx-no-bind": 0,
        "react/jsx-wrap-multilines": 2,
        "react/jsx-filename-extension": [2, { "extensions": [".tsx"] }],
        "react/jsx-sort-props": 0,
        "react/no-unsafe": 2,
        "react/prop-types": 0,
        "react-hooks/exhaustive-deps": 2,
        "react-hooks/rules-of-hooks": 2,
        "react/jsx-boolean-value": 2,
        "react/no-array-index-key": 2,
        "react/jsx-no-constructed-context-values": 2,
        "react/jsx-fragments": 2,
        "react/jsx-curly-brace-presence": ["error", { "props": "never", "children": "never" }],
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/naming-convention": [
            "error",
            { "selector": "default", "format": ["camelCase"], "leadingUnderscore": "allow" },
            { "selector": "variable", "format": ["camelCase", "UPPER_CASE", "PascalCase"] },
            { "selector": "parameter", "format": ["camelCase"], "leadingUnderscore": "allow" },
            { "selector": "typeLike", "format": ["PascalCase"] },
            {
                "selector": "interface",
                "format": ["PascalCase"],
                "custom": { "regex": "^I[A-Z0-9]", "match": true },
            },
            { "selector": "typeAlias", "format": ["PascalCase"], "custom": { "regex": "^T[A-Z0-9]", "match": true } },
            {
                "selector": "enum",
                "format": ["PascalCase"],
                "custom": { "regex": "^[A-Z][A-Za-z0-9]*Enum$", "match": true },
            },
            { "selector": "enumMember", "format": ["PascalCase"] },
            {
                "selector": "property",
                "format": ["camelCase", "UPPER_CASE", "PascalCase"],
                "leadingUnderscore": "allow",
            },
            { "selector": "property", "filter": ",^(__html|__v)$", "format": null },
            { "selector": "function", "format": ["camelCase", "PascalCase"] },
        ],
        "@typescript-eslint/array-type": ["off", { "default": "array" }],
        "@typescript-eslint/consistent-type-definitions": "off",
        "@typescript-eslint/prefer-ts-expect-error": "off",
        "@typescript-eslint/default-param-last": 1,
        "@typescript-eslint/no-magic-numbers": [0, { "ignore": [-1, 0, 1, 2] }],
        "@typescript-eslint/no-useless-constructor": 1,
        "@typescript-eslint/ban-ts-ignore": 0,
        "@typescript-eslint/explicit-function-return-type": 0,
        "@typescript-eslint/interface-name-prefix": 0,
        "@typescript-eslint/no-explicit-any": 0,
        "@typescript-eslint/no-inferrable-types": 0,
        "@typescript-eslint/no-unused-expressions": 2,
        "@typescript-eslint/no-shadow": 2,
        "@typescript-eslint/consistent-type-imports": ["error", { "prefer": "type-imports" }],
        "@typescript-eslint/ban-types": [
            "error",
            {
                "types": {
                    "FC": "Useless and has some drawbacks, see https://github.com/facebook/create-react-app/pull/8177",
                    "React.FC": "Useless and has some drawbacks, see https://github.com/facebook/create-react-app/pull/8177",
                    "React.FunctionComponent": "Useless and has some drawbacks, see https://github.com/facebook/create-react-app/pull/8177",
                },
                "extendDefaults": false,
            },
        ],
        "import/no-default-export": "off",
        "import/no-cycle": 2,
        "import/first": 2,
        "max-classes-per-file": 0,
        "jsx-a11y/anchor-is-valid": "off",
        "init-declarations": 0,
        "no-extra-bind": 0,
        "no-implicit-globals": 1,
        "no-multi-str": 1,
        "no-new": 1,
        "no-restricted-globals": 1,
        "no-restricted-properties": 1,
        "no-template-curly-in-string": 1,
        "no-undefined": 0,
        "no-warning-comments": 0,
        "prefer-named-capture-group": 0,
        "prefer-promise-reject-errors": 1,
        "require-atomic-updates": 1,
        "require-await": 0,
        "id-match": [2, "^[a-zA-Z0-9$_]*$"],
        "accessor-pairs": 2,
        "array-callback-return": 2,
        "camelcase": [2, { "allow": ["^UNSAFE_"], "properties": "never" }],
        "complexity": [2, { "max": 10 }],
        "consistent-return": 2,
        "curly": 0,
        "default-case": 2,
        "dot-notation": 0,
        "func-style": [2, "declaration", { "allowArrowFunctions": true }],
        "guard-for-in": 2,
        "id-length": [2, { "max": 56, "min": 1 }],
        "jsx-a11y/label-has-for": [
            2,
            {
                "allowChildren": false,
                "components": ["Label"],
                "required": { "some": ["nesting", "id"] },
            },
        ],
        "line-comment-position": 2,
        "max-depth": 2,
        "max-lines": [2, { "max": 500 }],
        "max-nested-callbacks": [2, 4],
        "max-params": [2, { "max": 5 }],
        "new-cap": 0,
        "no-unused-vars": 2,
        "no-alert": 2,
        "no-async-promise-executor": 2,
        "no-await-in-loop": 2,
        "no-bitwise": 2,
        "no-caller": 2,
        "no-continue": 2,
        "no-div-regex": 0,
        "no-else-return": 0,
        "no-eq-null": 2,
        "no-eval": 2,
        "no-extend-native": 2,
        "no-extra-label": 0,
        "no-implicit-coercion": 0,
        "no-implied-eval": 2,
        "no-inline-comments": 2,
        "no-iterator": 2,
        "no-label-var": 2,
        "no-labels": 2,
        "no-lone-blocks": 2,
        "no-loop-func": 2,
        "no-misleading-character-class": 2,
        "no-array-constructor": 2,
        "no-multi-assign": 2,
        "no-nested-ternary": 2,
        "no-new-func": 2,
        "no-new-object": 2,
        "no-new-wrappers": 2,
        "no-octal-escape": 2,
        "no-param-reassign": 2,
        "no-proto": 2,
        "no-prototype-builtins": 2,
        "no-return-assign": 2,
        "no-return-await": 2,
        "no-script-url": 2,
        "no-self-compare": 2,
        "no-sequences": 2,
        "no-shadow-restricted-names": 2,
        "no-throw-literal": 2,
        "no-undef-init": 0,
        "no-unmodified-loop-condition": 2,
        "no-unneeded-ternary": 2,
        "no-useless-call": 2,
        "no-useless-catch": 2,
        "no-useless-concat": 2,
        "no-useless-return": 0,
        "no-void": 2,
        "no-with": 2,
        "no-const-assign": 2,
        "no-var": 2,
        "object-shorthand": 2,
        "prefer-object-spread": 2,
        "one-var": [0, "never"],
        "operator-assignment": 0,
        "radix": 2,
        "require-unicode-regexp": 2,
        "spaced-comment": 2,
        "prefer-const": 2,
        "nonblock-statement-body-position": 2,
        "object-curly-spacing": 0,
        "arrow-body-style": ["error", "as-needed"],
        "template-curly-spacing": 2,
        "prefer-template": 2,
        "prefer-arrow-callback": 2,
        "arrow-spacing": 2,
        "eqeqeq": 2,
        "no-console": 0,
    },
    "globals": {
        "__IS_DEV__": true,
    },
    "overrides": [
        {
            "files": ["src/**/styled.ts", "src/**/styled.tsx"],
            "rules": {
                "@typescript-eslint/no-magic-numbers": ["off", {}],
            },
        },
        {
            "files": ["src/**", "config/**", "json-server/**", "vite.config.ts", "scripts/**"],
            "rules": {
                "import/no-default-export": "off",
            },
        },
        {
            "files": ["vite.config.ts"],
            "rules": {
                "@typescript-eslint/naming-convention": "off",
                "consistent-return": "off",
            },
        },
    ],
}
